from data_mining import *

def _test():

    working_dir = "experiment"
    solver = KuramotoSystem()

    param = [i for i in range(100,500+1,10)]
    calc_time = []
    '''
    topologies:
    "fully_connected": networkx.complete_graph,
    "random": networkx.fast_gnp_random_graph,
    "free_scaling": networkx.scale_free_graph,
    "random_sw": lambda **kwargs: networkx.watts_strogatz_graph(p=1.0, **kwargs),
    "regular_sw": lambda **kwargs: networkx.watts_strogatz_graph(p=0.0, **kwargs),
    "small_world": networkx.watts_strogatz_graph,
    "barbell": lambda **kwargs: networkx.barbell_graph(m1=kwargs["n"] // 2 - 1, m2=2)  
    '''
    for i in param:
        calc_time.append(
        r_mean_experiment(
            working_dir, solver,
            # network_properties=dict(topology="small_world", n=i, k=10, p=0.15),
            # network_properties=dict(topology="random", n=i, p=0.3),
            # network_properties=dict(topology="free_scaling", n=i, ),

            # network_properties=dict(topology="fully_connected", n=i, ),
            # network_properties=dict(topology="random_sw", n=i, k=10,),
            network_properties=dict(topology="regular_sw", n=i, k=10,),

            min_lambda=0, max_lambda=30, step_lambda=0.1,
            n_networks=1
        )
        )
        print(f"ITERRATION: {i}")


    import numpy
    print(calc_time)
    new_timings = numpy.transpose([ list(timings.values()) for timings in calc_time])
    print(new_timings)
    return param, zip(new_timings, calc_time[0].keys())

def time_test():
    param, time = _test()
    import matplotlib.pyplot as plt
    print(f"time: ", time)
    print(f"param: ", param)
    for i,l in time:
        print(l)
        plt.plot(param, i, label=l)
    plt.legend()
    plt.grid()
    plt.ylabel("t, sec")
    plt.xlabel("n, oscillator number")
    plt.show()

def just_plot():
    # small world
    y = [0.6259476000000002, 0.7284652999999999, 0.8768668000000002, 1.0114360000000002, 1.1809392, 1.3346263, 1.5745807999999988, 1.8377092000000008, 1.9292680000000004, 2.215735499999999, 2.3715145, 2.578747700000001, 2.8615809999999975, 3.079348200000002, 3.4184874, 4.115641500000002, 5.024661199999997, 4.446867599999997, 4.718309099999999, 4.9445558999999975, 5.414366100000002, 3.1725674999999995, 3.594479800000009, 3.556511900000004, 4.0474564000000015, 4.068853500000003, 4.512269399999994, 4.508576699999992, 5.049215099999998, 5.005448900000005, 5.597349699999995, 5.573225399999998, 6.112494100000006, 6.109064900000007, 6.731185300000007, 6.545521399999984, 7.356606099999993, 7.285153199999996, 8.043058300000013, 7.935376599999984]
    x = [100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490]
    plt.ylabel("t, sec")
    plt.xlabel("n, oscillator number")
    # random
    y2 = [0.6232562000000001, 0.7334259999999999, 0.8729137000000002, 1.0114425000000002, 1.1793464999999994, 1.3330246, 1.5697885000000005, 1.8346447000000001, 1.928416799999999, 2.2086074, 2.374471699999999, 2.5766288000000017, 2.862709800000001, 3.087757100000001, 3.434448400000001, 4.109602599999999, 4.987802800000004, 4.4371686, 4.7124225999999965, 5.040779099999995, 5.450296200000004, 3.1728105999999983, 3.5965743999999944, 3.5916978999999998, 4.037548000000001, 4.078470500000009, 4.520763299999999, 4.5146175, 5.056254199999998, 5.028046399999994, 5.597816399999999, 5.574501600000005, 6.160364099999995, 6.150425999999996, 6.7413865999999985, 6.685769400000012, 7.379546500000004, 7.280340499999994, 8.058672599999994, 7.952470800000015]
    #free scalling
    y3 = [0.6252806999999998, 0.7267240000000004, 0.8762318000000002, 1.0109469999999998, 1.1798884999999997, 1.3338505999999999, 1.5746511000000005, 1.8342562000000004, 1.9299137999999996, 2.225348199999999, 2.3874849000000005, 2.5781975999999993, 2.863690100000003, 3.085142900000001, 3.4402852999999993, 4.086657200000005, 5.023285700000002, 4.393755999999996, 4.708531999999998, 5.034311899999999, 5.4221036, 3.170024699999999, 3.6006683000000095, 3.599517199999994, 4.041206899999992, 4.07380160000001, 4.506632999999994, 4.507369199999999, 5.046590000000009, 4.9875881999999905, 5.561043699999999, 5.562716399999999, 6.1496905000000055, 6.103563399999999, 6.720378099999991, 6.652615099999991, 7.3502790999999945, 7.201941299999987, 7.976229700000005, 7.840293000000003]
    # "fully_connected"
    y4=[0.6256628999999998, 0.7289603000000002, 0.8769586999999999, 1.0116574999999997, 1.1775861, 1.3329316999999996, 1.5734472000000004, 1.8317181999999992, 1.9278318999999993, 2.2271300000000007, 2.3732716000000007, 2.5995294000000015,
     2.8679924999999997, 3.0821936, 3.4209654999999977, 4.117452100000001, 5.017276500000001, 4.451571899999998, 4.731653599999994, 5.062829600000001, 5.459565600000005, 3.179415899999995, 3.6030012000000013, 3.6097415999999924, 4.052250100000009,
     4.057425300000006, 4.50514849999999, 4.507818, 5.046283199999991, 5.015681600000008, 5.589328600000002, 5.569955400000012, 6.170608800000011, 6.163692499999996, 6.7399202000000145, 6.677611399999989, 7.385957200000007, 7.280972399999996,
     8.042565300000007, 7.948261500000001]
    # "random_sw"
    y5 =[0.6249111999999999, 0.7259899000000001, 0.8726938, 1.0153653, 1.1813672000000004, 1.3349856000000004, 1.5957095000000008, 1.8374812999999985, 1.9317034, 2.2227922000000007, 2.3724457999999995, 2.577581600000002, 2.864785900000001,
     3.0785695000000004, 3.417773199999999, 4.105824900000002, 5.013520300000003, 4.4382056999999975, 4.715352699999997, 5.041634099999996, 5.441145599999999, 3.1735434, 3.5925300999999976, 3.6062671999999907, 4.0388466999999935, 4.058063400000009,
     4.510825600000004, 4.507513599999996, 5.0429558999999955, 5.0187132999999875, 5.562539299999997, 5.564953900000006, 6.164089899999993, 6.135204600000009, 6.706981800000008, 6.61841170000001, 7.348513199999985, 7.19923829999999,
     8.024093399999998, 7.8835929999999905]
    # "regular_sw",
    y6 = [0.6278303000000001, 0.7305964999999999, 0.8778426000000001, 1.0111599000000004, 1.1830948000000001, 1.3326807, 1.573253199999999, 1.8645488000000014, 1.9556211000000001, 2.2174894000000016, 2.377503700000002, 2.5820384999999995,
     2.8624563999999992, 3.084100199999998, 3.4179815, 4.103824899999999, 5.009619600000001, 4.4579108000000005, 4.722792500000004, 5.0427775, 5.449900399999997, 3.1721483999999975, 3.591677599999997, 3.5396578000000005, 3.996393999999995, 4.0639118,
     4.486670799999999, 4.4957099000000085, 5.019279800000007, 5.013662199999999, 5.561571199999989, 5.550536399999999, 6.15137, 6.184581899999998, 6.7342692, 6.642228900000006, 7.372776700000003, 7.261916899999989, 7.993354100000005,
     7.836085099999991]
    labels = [ "small world","random","free scalling", "fully_connected","random_sw","regular_sw",]
    ylist = [y,y2,y3,y4,y5,y6]
    for i in range(len(ylist)):
        plt.plot(x,ylist[i], "-", label=labels[i])
    plt.ylabel("t, sec")
    plt.legend()
    plt.xlabel("n, oscillator number")
    plt.grid()
    plt.show()
if __name__ == '__main__':
    # time_test()
    just_plot()
"""
time:  [0.6259476000000002, 0.7284652999999999, 0.8768668000000002, 1.0114360000000002, 1.1809392, 1.3346263, 1.5745807999999988, 1.8377092000000008, 1.9292680000000004, 2.215735499999999, 2.3715145, 2.578747700000001, 2.8615809999999975, 3.079348200000002, 3.4184874, 4.115641500000002, 5.024661199999997, 4.446867599999997, 4.718309099999999, 4.9445558999999975, 5.414366100000002, 3.1725674999999995, 3.594479800000009, 3.556511900000004, 4.0474564000000015, 4.068853500000003, 4.512269399999994, 4.508576699999992, 5.049215099999998, 5.005448900000005, 5.597349699999995, 5.573225399999998, 6.112494100000006, 6.109064900000007, 6.731185300000007, 6.545521399999984, 7.356606099999993, 7.285153199999996, 8.043058300000013, 7.935376599999984]
"""

"""
param:  [100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490]
"""